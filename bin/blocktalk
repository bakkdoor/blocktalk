#!/usr/bin/env ruby

require "rubygems"
require "treetop"

if ARGV.size < 1
  puts "Error: Please specify a source file to interpret.\n\n"
  puts "Usage:\nblocktalk source.bt [--debug / --ruby]"
  exit
end

load_path = ""

if ARGV.join(" ") =~ /\-I\s*(\S+)/
  $: << File.expand_path($1)
  load_path = $1 + "/"
end

# ruby 1.8 is default
ruby_implementation = "ruby"

if ARGV.join(" ") =~ /\--rubyimp (\S+)/
  ruby_implementation = $1
  puts "Using #{ruby_implementation} for Blocktalk"

  # remove option from argv, since it's not used anymore:
  idx = ARGV.index("--rubyimp")
  ARGV.delete_at(idx)
  ARGV.delete_at(idx) # rubyimp argument now is at this index
end

require load_path + "lib/core"
require load_path + "evaluator"
require load_path + "parser/nodes"
require load_path + "version"

if ARGV.include?("--version") || ARGV.include?("-v")
  puts "blocktalk v#{blocktalk_version}"
  exit
end

parser_dynamic = ARGV.include?("--dynparser")

if parser_dynamic
  # load & generate parser from grammar dynamically
  Treetop.load load_path + "grammar/blocktalk.tt"
else
  # load pregenerated parser (faster)
  require load_path + "grammar/blocktalk"
end

parse_file = ARGV[0]
parser = BlocktalkParser.new

ast = parser.parse IO.read(parse_file)

# if parsig failed -> output error message with reason
unless ast
  puts "ParseError in #{parse_file} (line #{parser.failure_line} / #{parser.failure_column}):"
  puts "#{parser.failure_reason}"
  exit
end

# start evaluation process
ast.evaluate

debug_on =  ARGV.include?("--debug")
ruby_output = ARGV.include?("--ruby")

if debug_on
  puts ast.inspect
  puts "\n============================================================\n\n"
  puts "--------------------\n"
  puts "Generated Ruby code:\n"
  puts "--------------------\n\n"
  Evaluator.inspect
  puts "\n============================================================\n\n"
end


if ruby_output
  Evaluator.inspect
else
  # also pass any additional args in ARGV to Evaluator
  # (ARGV[0] is the name of the file to execute).
  Evaluator.eval(ruby_implementation, ARGV[1..-1])

  if debug_on
    puts
  end
end
