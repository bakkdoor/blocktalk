def foo = do |x|
  Console puts ("bkzubb: " + (x to_s))
end

def bar = do
  100
end

Console puts: (self foo: 10)


[1,2,3] each { |x|
    Console puts: x
}

# anonymous class
c = Class new {
  def foo = do |x|
      Console puts: ("in foo: " + x)
  end
}

obj = c new

obj foo: (10 to_s)

# new class Foo
Class >> :Foo do
  def bar = do |x|
    Console puts: ("in Foo#bar: " + (x to_s))
  end
end

foo = Foo new
foo bar: "hello, world"

# extending Foo class
#Class in: :Foo do
Foo extend do
  def bazz = do
    Console puts: "in Foo#bazz!Â°!!"
    self bar: "so cool!!"
  end
end

foo bazz


# define new class called MyArray, derived from Array
# this is equivalent to:
# Class in: MyArray deriving: Array ...
# just less typing :)

Class >> {:MyArray => Array} do
  def crazy_ouput = do
    self each { |x|
       Console puts: ("craaaaaazy: " + (x to_s))
    }
  end

  def take_n = do |amount|
    i = 0
    arr = []
    {i < amount} while_true {
      arr << (self at: i)
      i = (i + 1)
    }

    return: arr
  end

  # my_each takes a codeblock as an explicit argument
  def my_each = do |block|
    i = 0
    {i < (self size)} while_true {
      curr_item = (self at: i)
      block call: curr_item
      i = (i + 1)
    }
  end
end

myarr = MyArray new
myarr << 10
myarr << 100
myarr << 1000
myarr << 10000
myarr << 100000

myarr crazy_ouput

Console puts: (myarr class)

Console puts: ((myarr take_n: 3) inspect)


myarr my_each: { |elem|
  Console puts: ("my_each: " + (elem to_s))
}

# File open: "grammar/test2.blk" mode: "r" do |f|
#   Console puts: (f readlines)
# end

Class >> :MyClass do
  def funky = do |name|
    Console puts: ("in MyClass#funky with name=" + name)
  end
end

(MyClass new) funky: "christopher"


Module >> :MyModule {
  def test = do |bar|
    Console puts: ("in MyModule#test with bar = " + (bar to_s))
  end
}

Class >> :MyClass do
  self mixin: [MyModule]
end

mc = MyClass new
mc test: "mixin-test ;)"
