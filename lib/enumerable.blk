Module >> :Enumerable {
  def collect = { |block|
    arr = Array new
    self each: do |x|
      arr << (block call: x)
    end
    arr
  }

  def map = (collect)


  def select = { |block|
    arr = Array new: (self size)
    self each: do |x|
      (block call: x) if_true do
        arr << x
      end
    end
    arr
  }

  def reject = { |block|
    arr = Array new: (self size)
    self each do |x|
      (block call: x) if_false do
        arr << x
      end
    end
    arr
  }

  def inject = { |initial=nil|
    (initial nil?)
    |> if_true do

    end

    |> if_false do

    end
  }

  def empty? = { (self size) == 0 }
}
